site_name: Clarify CLI Documentation

# This tells pydocmd which pages to generate from which Python modules,
# functions and classes. At the first level is the page name, below that
# is a tree of Python member names (modules, classes, etc.) that should be
# documented. Higher indentation leads to smaller header size.
generate:
- clarify.md:
    - clarify.main.Clarify
- functions/version.md:
    - clarify.main.Clarify.version
- functions/fetch.md:
    - clarify.main.Clarify.fetch
# - baz/more-stuff.md:
#   - foobar.more++               # (++ to include members, and their members)

# MkDocs pages configuration. The `<<` operator is sugar added by pydocmd
# that allows you to use an external Markdown file (eg. your project's README)
# in the documentation. The path must be relative to current working directory.
nav:
# - Home: index.md << ../README.md
  - Home: index.md 
  - Clarify:
    - 'Clarify Main Class': clarify.md
    - Functions:
        - 'Version': functions/version.md
        - 'Fetch': functions/fetch.md

# These options all show off their default values. You don't have to add
# them to your configuration if you're fine with the default.
docs_dir: source
gens_dir: _build/pydocmd     # This will end up as the MkDocs 'docs_dir'
site_dir: _build/site
theme:    readthedocs
loader:   pydocmd.loader.PythonLoader
preprocessor: pydocmd.preprocessor.Preprocessor



# Whether to output headers as markdown or HTML.  Used to workaround
# https://github.com/NiklasRosenstein/pydoc-markdown/issues/11.  The default is
# to generate HTML with unique and meaningful id tags, which can't be done with
# markdown.
#
# Note: if using the simple generator mode, this will default to 'markdown'
# instead of 'html'.
headers: html

# Additional search path for your Python module. If you use Pydocmd from a
# subdirectory of your project (eg. docs/), you may want to add the parent
# directory here.
additional_search_paths:
- ..
